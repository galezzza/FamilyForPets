// <auto-generated />
using System;
using System.Collections.Generic;
using FamilyForPets.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FamilyForPets.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250519183856_PetInitial")]
    partial class PetInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FamilyForPets.Domain.VolunteerAgregate.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_phone_number");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("DateOfBirth")
                        .HasColumnType("bigint")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<bool>("IsNeutered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_neutered");

                    b.Property<bool?>("IsVaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vaccinated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PetHealthDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("pet_health_description");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight");

                    b.ComplexProperty<Dictionary<string, object>>("Color", "FamilyForPets.Domain.VolunteerAgregate.Pet.Color#PelageColor", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("PrimaryColor")
                                .HasColumnType("integer")
                                .HasColumnName("primary_color");

                            b1.Property<int?>("SecondaryColor")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_color");

                            b1.Property<int?>("TertiaryColor")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_color");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("HelpStatus", "FamilyForPets.Domain.VolunteerAgregate.Pet.HelpStatus#HelpStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("help_status_enum");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PaymentDatails", "FamilyForPets.Domain.VolunteerAgregate.Pet.PaymentDatails#DetailsForPayment", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CardNumber")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("card_number_for_payment");

                            b1.Property<string>("OtherDetails")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("other_payment_details");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PetBreed", "FamilyForPets.Domain.VolunteerAgregate.Pet.PetBreed#PetBreedAndSpecies", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("BreedId")
                                .HasColumnType("uuid")
                                .HasColumnName("breed_id");

                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid")
                                .HasColumnName("species_id");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PetCurrentAdress", "FamilyForPets.Domain.VolunteerAgregate.Pet.PetCurrentAdress#Adress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("country");

                            b1.Property<string>("HouseNumber")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("house_number");

                            b1.Property<string>("Street")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("street");
                        });

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.ToTable("pets", null, t =>
                        {
                            t.HasCheckConstraint("CK_PaymentDetails_CardNumberRequiredIfOtherExists", "other_payment_details IS NULL OR card_number_for_payment IS NOT NULL");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
