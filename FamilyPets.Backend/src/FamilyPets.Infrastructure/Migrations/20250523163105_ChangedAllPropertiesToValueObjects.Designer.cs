// <auto-generated />
using System;
using System.Collections.Generic;
using FamilyForPets.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FamilyForPets.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250523163105_ChangedAllPropertiesToValueObjects")]
    partial class ChangedAllPropertiesToValueObjects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FamilyForPets.Domain.SpeciesAgregate.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("species_id")
                        .HasColumnType("uuid")
                        .HasColumnName("species_id");

                    b.HasKey("Id")
                        .HasName("pk_breeds");

                    b.HasIndex("species_id")
                        .HasDatabaseName("ix_breeds_species_id");

                    b.ToTable("breeds", (string)null);
                });

            modelBuilder.Entity("FamilyForPets.Domain.SpeciesAgregate.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_species");

                    b.ToTable("species", (string)null);
                });

            modelBuilder.Entity("FamilyForPets.Domain.VolunteerAgregate.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_phone_number");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint")
                        .HasColumnName("created_at");

                    b.Property<long?>("DateOfBirth")
                        .HasColumnType("bigint")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("pet_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PetHealthDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("pet_health_description");

                    b.Property<Guid>("volunteer_id")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.ComplexProperty<Dictionary<string, object>>("CastrationStatus", "FamilyForPets.Domain.VolunteerAgregate.Pet.CastrationStatus#CastrationStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("castration_status_enum");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Color", "FamilyForPets.Domain.VolunteerAgregate.Pet.Color#PelageColor", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("PrimaryColor")
                                .HasColumnType("integer")
                                .HasColumnName("primary_color");

                            b1.Property<int?>("SecondaryColor")
                                .HasColumnType("integer")
                                .HasColumnName("secondary_color");

                            b1.Property<int?>("TertiaryColor")
                                .HasColumnType("integer")
                                .HasColumnName("tertiary_color");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Height", "FamilyForPets.Domain.VolunteerAgregate.Pet.Height#Length", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("height");

                            b1.ComplexProperty<Dictionary<string, object>>("Type", "FamilyForPets.Domain.VolunteerAgregate.Pet.Height#Length.Type#LengthType", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("length_type_enum");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("HelpStatus", "FamilyForPets.Domain.VolunteerAgregate.Pet.HelpStatus#HelpStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("help_status_enum");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PaymentDatails", "FamilyForPets.Domain.VolunteerAgregate.Pet.PaymentDatails#DetailsForPayment", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CardNumber")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("card_number_for_payment");

                            b1.Property<string>("OtherDetails")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("other_payment_details");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PetBreed", "FamilyForPets.Domain.VolunteerAgregate.Pet.PetBreed#PetBreedAndSpecies", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("BreedId")
                                .HasColumnType("uuid")
                                .HasColumnName("breed_id");

                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid")
                                .HasColumnName("species_id");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PetCurrentAdress", "FamilyForPets.Domain.VolunteerAgregate.Pet.PetCurrentAdress#Adress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("country");

                            b1.Property<string>("HouseNumber")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("house_number");

                            b1.Property<string>("Street")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Weight", "FamilyForPets.Domain.VolunteerAgregate.Pet.Weight#Mass", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Value")
                                .HasColumnType("double precision")
                                .HasColumnName("weight");

                            b1.ComplexProperty<Dictionary<string, object>>("Type", "FamilyForPets.Domain.VolunteerAgregate.Pet.Weight#Mass.Type#MassType", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("mass_type_enum");
                                });
                        });

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.HasIndex("volunteer_id")
                        .HasDatabaseName("ix_pets_volunteer_id");

                    b.ToTable("pets", null, t =>
                        {
                            t.HasCheckConstraint("CK_Height_BothOrNone", "(height IS NULL AND length_type_enum IS NULL) OR (height IS NOT NULL AND length_type_enum IS NOT NULL)");

                            t.HasCheckConstraint("CK_PaymentDetails_CardNumberRequiredIfOtherExists", "other_payment_details IS NULL OR card_number_for_payment IS NOT NULL");

                            t.HasCheckConstraint("CK_Weight_BothOrNone", "(weight IS NULL AND mass_type_enum IS NULL) OR (weight IS NOT NULL AND mass_type_enum IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("FamilyForPets.Domain.VolunteerAgregate.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("volunteer_description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<int>("ExperienceInYears")
                        .HasColumnType("integer")
                        .HasColumnName("experience_in_years");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("phone_number");

                    b.ComplexProperty<Dictionary<string, object>>("DetailsForPayment", "FamilyForPets.Domain.VolunteerAgregate.Volunteer.DetailsForPayment#DetailsForPayment", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CardNumber")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("card_number_for_payment");

                            b1.Property<string>("OtherDetails")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("other_payment_details");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "FamilyForPets.Domain.VolunteerAgregate.Volunteer.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("AdditionalName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("additional_name");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("first_name");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("last_name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_volunteers");

                    b.ToTable("volunteers", (string)null);
                });

            modelBuilder.Entity("FamilyForPets.Domain.SpeciesAgregate.Breed", b =>
                {
                    b.HasOne("FamilyForPets.Domain.SpeciesAgregate.Species", null)
                        .WithMany("Breeds")
                        .HasForeignKey("species_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_breeds_species_species_id");
                });

            modelBuilder.Entity("FamilyForPets.Domain.VolunteerAgregate.Pet", b =>
                {
                    b.HasOne("FamilyForPets.Domain.VolunteerAgregate.Volunteer", null)
                        .WithMany("AllPets")
                        .HasForeignKey("volunteer_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_pets_volunteers_volunteer_id");

                    b.OwnsOne("FamilyForPets.Domain.VolunteerAgregate.PetValueObjects.PetVaccinesList", "PetVaccines", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.HasKey("PetId");

                            b1.ToTable("pets");

                            b1.ToJson("pet_vaccienes");

                            b1.WithOwner()
                                .HasForeignKey("PetId")
                                .HasConstraintName("fk_pets_pets_id");

                            b1.OwnsMany("FamilyForPets.Domain.VolunteerAgregate.PetValueObjects.PetVaccine", "PetVaccines", b2 =>
                                {
                                    b2.Property<Guid>("PetVaccinesListPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("pet_vacciene");

                                    b2.HasKey("PetVaccinesListPetId", "__synthesizedOrdinal");

                                    b2.ToTable("pets");

                                    b2.ToJson("pet_vaccienes");

                                    b2.WithOwner()
                                        .HasForeignKey("PetVaccinesListPetId")
                                        .HasConstraintName("fk_pets_pets_pet_vaccines_list_pet_id");
                                });

                            b1.Navigation("PetVaccines");
                        });

                    b.Navigation("PetVaccines")
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyForPets.Domain.VolunteerAgregate.Volunteer", b =>
                {
                    b.OwnsOne("FamilyForPets.Domain.VolunteerAgregate.VolunteerValueObjects.VolunteerSocialNetworksList", "VolunteerSocialNetworks", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerId");

                            b1.ToTable("volunteers");

                            b1.ToJson("volunteer_social_newtworks");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId")
                                .HasConstraintName("fk_volunteers_volunteers_id");

                            b1.OwnsMany("FamilyForPets.Domain.VolunteerAgregate.VolunteerValueObjects.SocialNetwork", "SocialNetworks", b2 =>
                                {
                                    b2.Property<Guid>("VolunteerSocialNetworksListVolunteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("social_network_name");

                                    b2.Property<string>("Url")
                                        .IsRequired()
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)")
                                        .HasColumnName("social_network_name");

                                    b2.HasKey("VolunteerSocialNetworksListVolunteerId", "__synthesizedOrdinal");

                                    b2.ToTable("volunteers");

                                    b2.ToJson("volunteer_social_newtworks");

                                    b2.WithOwner()
                                        .HasForeignKey("VolunteerSocialNetworksListVolunteerId")
                                        .HasConstraintName("fk_volunteers_volunteers_volunteer_social_networks_list_volunteer_id");
                                });

                            b1.Navigation("SocialNetworks");
                        });

                    b.Navigation("VolunteerSocialNetworks")
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyForPets.Domain.SpeciesAgregate.Species", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("FamilyForPets.Domain.VolunteerAgregate.Volunteer", b =>
                {
                    b.Navigation("AllPets");
                });
#pragma warning restore 612, 618
        }
    }
}
